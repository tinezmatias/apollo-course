import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import ClientOnly from '../src/components/clientOnly';
import { useMutation, useQuery } from '@apollo/client';
import { BOOKS_QUERY, DATE_MUTATION } from '../src/definitions/books';
import { useEffect } from 'react';

const Footer = () => (
  <footer className={styles.footer}>
    <a
      href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
      target='_blank'
      rel='noopener noreferrer'>
      Powered by{' '}
      <span className={styles.logo}>
        <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
      </span>
    </a>
  </footer>
);

const HeadCustom = () => (
  <Head>
    <title>Create Next App</title>
    <meta name='description' content='Generated by create next app' />
    <link rel='icon' href='/favicon.ico' />
  </Head>
);

const Card = () => {
  return (
    <div className={styles.grid}>
      <div className={styles.card}>
        <h2>Documentation &rarr;</h2>
        <p>Find in-depth information about Next.js features and API.</p>
      </div>
    </div>
  );
};

const Loading = () => {
  return (
    <div className={styles.container}>
      <HeadCustom />
      <main className={styles.main}>
        <h1 className={styles.title}>Loading...</h1>
      </main>

      <Footer />
    </div>
  );
};

const Home: NextPage = () => {
  const onCompleted = (data: any) => {
    console.log('>>>> data', data);
  };

  const onError = (error: any) => {
    console.log('>>>> error', error);
  };

  useQuery(BOOKS_QUERY, {
    variables: {
      filters: {
        name: 'hola',
      },
    },
    onCompleted,
  });

  const [exec, { loading }] = useMutation(DATE_MUTATION, {
    onCompleted,
    onError,
    update: (cache, result, options) => {
      try {
        const existingData: any = cache.readQuery({
          query: BOOKS_QUERY,
          variables: {
            filters: {
              name: 'hola',
            },
          },
        });

        const books = existingData.books;

        const newBook = {
          title: 'Creado en la cache',
          __typename: 'Book',
        };

        const merged = [...books, newBook];

        cache.writeQuery({
          query: BOOKS_QUERY,
          variables: {
            filters: {
              name: 'hola',
            },
          },
          data: {
            books: merged,
          },
        });
      } catch (error) {
        console.log('>>>> errror', error);
      }
    },
  });

  useEffect(() => {
    exec({
      variables: {
        today: 1663604990289,
      },
    });
  }, []);

  if (loading) return <Loading />;

  return (
    <div className={styles.container}>
      <HeadCustom />

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Apollo</h1>

        <div className={styles.grid}>
          <Card />
          <Card />
          <Card />
          <Card />
        </div>
      </main>

      <Footer />
    </div>
  );
};

const Wrapped = () => {
  return (
    <ClientOnly>
      <Home />
    </ClientOnly>
  );
};

export default Wrapped;
